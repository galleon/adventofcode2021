from ortools.linear_solver import pywraplp
from ortools.sat.python import cp_model

my_program = [
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "1"],
    ["add", "x", "12"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "6"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "1"],
    ["add", "x", "10"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "6"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "1"],
    ["add", "x", "13"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "3"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "26"],
    ["add", "x", "-11"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "11"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "1"],
    ["add", "x", "13"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "9"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "26"],
    ["add", "x", "-1"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "3"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "1"],
    ["add", "x", "10"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "13"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "1"],
    ["add", "x", "11"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "6"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "26"],
    ["add", "x", "0"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "14"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "1"],
    ["add", "x", "10"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "10"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "26"],
    ["add", "x", "-5"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "12"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "26"],
    ["add", "x", "-16"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "10"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "26"],
    ["add", "x", "-7"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "11"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
    ["inp", "w"],
    ["mul", "x", "0"],
    ["add", "x", "z"],
    ["mod", "x", "26"],
    ["div", "z", "26"],
    ["add", "x", "-11"],
    ["eql", "x", "w"],
    ["eql", "x", "0"],
    ["mul", "y", "0"],
    ["add", "y", "25"],
    ["mul", "y", "x"],
    ["add", "y", "1"],
    ["mul", "z", "y"],
    ["mul", "y", "0"],
    ["add", "y", "w"],
    ["add", "y", "15"],
    ["mul", "y", "x"],
    ["add", "z", "y"],
]


def main():
    registers = {r: r for r in "wxyz"}

    program = []
    try:
        with open("inputs/2021/24_") as f:
            for line in f:
                program.append(line.split())
    except:
        program = my_program

    # program = []

    for i, inst in enumerate(program):

        # print(f"{registers} | {inst}")

        if inst[0] == "inp":
            print(f"constraint v[{i}] = d[{i//18}];")
            registers[inst[1]] = f"v[{i}]"
            continue

        op1, op2 = inst[1:]
        op2 = registers[op2] if op2 in registers else int(op2)

        if inst[0] == "add":
            print(f"constraint v[{i}] = {registers[op1]} + {op2};")
        elif inst[0] == "mul":
            print(f"constraint v[{i}] = {registers[op1]} * {op2};")
        elif inst[0] == "mod":
            print(f"constraint v[{i}] = {registers[op1]} mod {op2};")
        elif inst[0] == "div":
            print(f"constraint v[{i}] = {registers[op1]} div {op2};")
        elif inst[0] == "eql":
            print(
                f"constraint v[{i}] = if {registers[op1]} == {op2} then 1 else 0 endif;"
            )
        else:
            assert False
        registers[op1] = f"v[{i}]"


if __name__ == "__main__":
    main()
